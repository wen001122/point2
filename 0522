

class EarDataset(Dataset):
    def __init__(self, split="train", data_root="Pointcept/data/dataset", transform=None, test_mode=False):
        self.split = split
        self.data_root = data_root
        self.transform = transform
        self.test_mode = test_mode

        split_dir = os.path.join(self.data_root, self.split)
        self.file_list = sorted([
            os.path.join(split_dir, fname)
            for fname in os.listdir(split_dir)
            if fname.endswith(".npy")
        ])

    def __len__(self):
        return len(self.file_list)

    def __getitem__(self, idx):
        arr = np.load(self.file_list[idx])  # shape (N, 7)
        coord = arr[:, :3].astype(np.float32)
        normal = arr[:, 3:6].astype(np.float32)
        segment = arr[:, 6].astype(np.int64)

        data_dict = dict(coord=coord, normal=normal, segment=segment)
        if self.transform:
            data_dict = self.transform(data_dict)
        return data_dict




data = dict(
    num_classes=2,
    ignore_index=-1,
    names=["non-ear", "ear"],
    train=dict(
        type="EarDataset",
        split="train",
        data_root="Pointcept/data/dataset",
        transform=[
            dict(type="GridSample", grid_size=0.02, hash_type="fnv", mode="train", return_grid_coord=True),
            dict(type="ToTensor"),
            dict(
                type="Collect",
                keys=("coord", "grid_coord", "segment"),
                feat_keys=("normal",),
            ),
        ],
        test_mode=False,
    ),
    val=dict(
        type="EarDataset",
        split="val",
        data_root="Pointcept/data/dataset",
        transform=[
            dict(type="GridSample", grid_size=0.02, hash_type="fnv", mode="train", return_grid_coord=True),
            dict(type="ToTensor"),
            dict(
                type="Collect",
                keys=("coord", "grid_coord", "segment"),
                feat_keys=("normal",),
            ),
        ],
        test_mode=False,
    ),
    test=dict(
        type="EarDataset",
        split="test",
        data_root="Pointcept/data/dataset",
        transform=[
            dict(type="GridSample", grid_size=0.02, hash_type="fnv", mode="test", return_grid_coord=True),
        ],
        test_mode=True,
        test_cfg=dict(
            voxelize=dict(type="GridSample", grid_size=0.02, hash_type="fnv", mode="test", return_grid_coord=True),
            crop=None,
            post_transform=[
                dict(type="ToTensor"),
                dict(
                    type="Collect",
                    keys=("coord", "grid_coord", "index"),
                    feat_keys=("normal",),
                ),
            ],
            aug_transform=[
                [dict(type="RandomScale", scale=[1.0, 1.0])],
            ],
        ),
    ),
)
